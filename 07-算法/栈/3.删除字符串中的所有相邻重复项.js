// ##### 删除字符串中的所有相邻重复项 


// 给出由小写字母组成的字符串 S ，重复项删除操作 会选择两个相邻且相同的字母，并删除它们。

// 在 S 上反复执行重复项删除操作，直到无法继续删除。

// 在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。

// 输入："abbaca"
// 输出："ca"
// 解释：
// 例如，在 "abbaca" 中，我们可以删除 "bb" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 "aaca"，
// 其中又只有 "aa" 可以执行重复项删除操作，所以最后的字符串为 "ca"。


// 解法：利用栈
// 解题思路： 遍历字符串，依次入栈，入栈时判断与栈头元素是否一致，如果一致，即这两个元素相同相邻，则需要将栈头元素出栈，并且当前元素也无需入栈

// 解题步骤： 遍历字符串，取出栈头字符，判断当前字符与栈头字符是否一致

// 不一致，栈头字符进栈，当前字符进栈
// 一致，即栈头字符与当前字符相同相邻，都不需要进栈，直接进入下次遍历即可
// 遍历完成后，返回栈中字符串

var removeDuplicates = function (S) {
  let stack = []
  for (c of S) {
    let prev = stack.pop()
    if (prev !== c) {
      stack.push(prev)
      stack.push(c)
    }
  }
  return stack.join('')
};